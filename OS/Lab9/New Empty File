struct values{ 
    float num1; 
    float num2; 
    char operation; 
}; 
program COMPUTE{ 
    version COMPUTE_VERS{ 
        float ADD(values) =1;
        float SUB(values)=2; 
        float MUL(values)=3; 
        float DIV(values)=4; 
    } =6; 
} = 456123789;

#include "IDL.h"
#include <stdio.h>

float compute_6(char *host,float a,float b,char op){
        CLIENT *clnt;
        float *result_1;
        values add_6_arg;
        float *result_2;
        values sub_6_arg;
        float *result_3;
        values mul_6_arg;
        float *result_4;
        values div_6_arg;
        if(op=='+'){
                add_6_arg.num1=a;
                add_6_arg.num2=b;
                add_6_arg.operation=op;
                clnt = clnt_create (host, COMPUTE, COMPUTE_VERS, "udp");
                if (clnt == NULL) {
                        clnt_pcreateerror (host);
                        exit (1);
                }
                result_1 = add_6(&add_6_arg, clnt);
                if (result_1 == (float *) NULL) clnt_perror (clnt, "call failed");
                clnt_destroy (clnt);
                return (*result_1);
        }
        else if(op=='-'){
                sub_6_arg.num1=a;
                sub_6_arg.num2=b;
                sub_6_arg.operation=op;
                clnt = clnt_create (host, COMPUTE, COMPUTE_VERS, "udp");
                if (clnt == NULL) {
                        clnt_pcreateerror (host);
                        exit (1);
                }
                result_2 = sub_6(&sub_6_arg, clnt);
                if (result_2 == (float *) NULL) clnt_perror (clnt, "call failed");
                clnt_destroy (clnt);
                return (*result_2);
        }
                return (*result_2);
        }
                else if(op=='*'){
                        mul_6_arg.num1=a;
                        mul_6_arg.num2=b;
                        mul_6_arg.operation=op;
                        clnt = clnt_create (host, COMPUTE, COMPUTE_VERS, "udp");
                        if (clnt == NULL) {
                                clnt_pcreateerror (host);
                                exit (1);
                        }
                        result_3 = mul_6(&mul_6_arg, clnt);
                        if (result_3 == (float *) NULL) clnt_perror (clnt, "call failed");
                        clnt_destroy (clnt);
                        return (*result_3);
                }
                else if(op=='/'){
                        if(b==0){
                                printf("Dividing by 0 isn't allowed.\n");
                                exit(0);
                        }
                        else{
                                div_6_arg.num1=a;
                                div_6_arg.num2=b;
                                div_6_arg.operation=op;
                                clnt = clnt_create (host, COMPUTE, COMPUTE_VERS, "udp");
                                if (clnt == NULL) {
                                        clnt_pcreateerror (host);
                                        exit (1);
                                }
                                result_4 = div_6(&div_6_arg, clnt);
                                if (result_4 == (float *) NULL) clnt_perror (clnt, "call failed");
                                clnt_destroy (clnt);
                                return (*result_4);
                        }
                }
}

int login(){
        char username[100];
        int password;
        printf("Username: ");
        scanf("%s", &username);
        if (!strcmp(username, "kali")){
                printf("Password: ");
                scanf("%d", &password);
                if (password == 2020){
                        printf("SUCCESS\n");
                        return 1;
                }
            else {
                printf("Incorrent password\n");
                return 0;
            }
        }
        printf("Incorrect username\n");
        return 0;
}
int main (int argc, char *argv[]){
        char *host;
        float number1,number2;
        char oper;
        if (login()){
                while (1){
                        printf("Welcome to Super_Calc!\nEnter 2 numbers and operator:\n");
                        scanf("%f",&number1);
                        scanf("%f",&number2);
                        scanf("%s",&oper);
                        host = argv[1];
                        printf("Answer= %f\n\n",compute_6(host,number1,number2,oper));
                }
        }
        else{
                printf("Failed to login\n");
        }
        exit(0);
}   

#include "IDL.h" 
float * add_6_svc(values *argp, struct svc_req *rqstp) { 
    static float result; 
    result = argp->num1 + argp->num2; 
    return &result; 
} 
float * sub_6_svc(values *argp, struct svc_req *rqstp) { 
    static float result; 
    result = argp->num1 - argp->num2; 
    return &result; 
} 
float * mul_6_svc(values *argp, struct svc_req *rqstp) { 
    static float result; 
    result = argp->num1 * argp->num2; 
    return &result; 
} 
float * div_6_svc(values *argp, struct svc_req *rqstp) { 
    static float result; 
    result = argp->num1 / argp->num2; 
    return &result; 
}

